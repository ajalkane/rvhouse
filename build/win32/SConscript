# import these variables from the parent build script
Import('env', 'sources', 'target_name', 'resource')

extra_libs = [
        'comctl32','ws2_32','winspool','mpr','m',
        'dpnlobby','dxguid','ole32'
        ]

# env.RES(resource)
env.Append(LIBS=extra_libs)
#env.Append(CPPFLAGS = '-mthreads')
env.Append(LINKFLAGS = ['-mwindows','-static'])
env.Program(target=target_name, source=sources)

# Needed to get around a problem with too long command line on
# windows 2000 when building. Code taken from:
# http://www.scons.org/cgi-sys/cgiwrap/scons/moin.cgi/LongCmdLinesOnWin32
if env['PLATFORM'] == 'win32':
    import win32file
    import win32event
    import win32process
    import win32security
    import string

    def my_spawn(sh, escape, cmd, args, spawnenv):
        for var in spawnenv:
            spawnenv[var] = spawnenv[var].encode('ascii', 'replace')

        sAttrs = win32security.SECURITY_ATTRIBUTES()
        StartupInfo = win32process.STARTUPINFO()
        newargs = string.join(map(escape, args[1:]), ' ')
        cmdline = cmd + " " + newargs

        # check for any special operating system commands
        if cmd == 'del':
            for arg in args[1:]:
                win32file.DeleteFile(arg)
            exit_code = 0
        else:
            # otherwise execute the command.
            hProcess, hThread, dwPid, dwTid = win32process.CreateProcess(None, cmdline, None, None, 1, 0, spawnenv, None, StartupInfo)
            win32event.WaitForSingleObject(hProcess, win32event.INFINITE)
            exit_code = win32process.GetExitCodeProcess(hProcess)
            win32file.CloseHandle(hProcess);
            win32file.CloseHandle(hThread);
        return exit_code

    env['SPAWN'] = my_spawn
